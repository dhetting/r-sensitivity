rm(list=ls())
R_LIBS= ("/home/R/library")
options(scipen=999) #turn scientific notation off
setwd("~/GitHub/r-sensitivity/")
#Libraries
library (kSamples)
library (data.table)
library (dplyr)
#Functions
get.cdf <- function (numeric.variable, df) {
Fn <- ecdf (numeric.variable)
return (knots (Fn))
}
#study design can't have years, only duration
load ("design.RDA")
design <- as.data.table (design.in.bsm.format)#need the design with "duration" as a variable
df <- design
merge.var.names <- paste (df$variable, df$sub1, df$sub2)
design <- data.table(variable = merge.var.names, run = df$run, value = df$value)
# local sensitivity analysis
# define behavioural (B) and non-behavioral (B.bar) sets to test for significant diff in their input settings
# select runs of interest (B) from an excel or csv file that is chosen based on tableau
# Use the MCF results to filter the input set
B.runs <- read.table ("B.csv", header=TRUE, sep=",")#these are the runs of interest Laura chose these based on tableau
B <- subset(design, design$run %in% B.runs$run)
B.sorted <- setorder (B, variable)
B.list <- split(B.sorted, B.sorted$variable)
B.names <- as.character (unique (B.sorted$variable))
LIST <- list ()
for (i in 1: length(B.list)) {
LIST [[i]] <- get.cdf (B.list[[i]]$value, B.list[[i]])
B.cdf <- LIST
}
names (B.cdf) <- B.names #apply the vbl names to the list elements
rm(design.in.bsm.format, B, B.sorted, merge.var.names, df)
#get the cdf for Bbar
B.bar <- design [ !(design$run %in% B.runs$run), ]#this creates the Bbar by subtracting B from the design
B.bar.sorted <- setorder (B.bar, variable)
B.bar.list <- split(B.bar.sorted, B.bar.sorted$variable)
B.bar.names <- as.character (unique (B.bar.sorted$variable))
LIST <- list ()
for (i in 1:length (B.bar.list)) {
LIST [[i]] <- get.cdf (B.bar.list[[i]]$value, B.bar.list[[i]])
B.bar.cdf <- LIST
}
names (B.bar.cdf) <- B.bar.names#apply the vbl names to the list elements
rm(B.bar, B.bar.sorted, B.runs, design, B.bar.names, LIST)
#perform Anderson-Darling test to compare B to Bbar. H0 = B and Bbar are from the same population; H1 = B and Bbar are not from the same population
#pvalues are based on 5000 bootstraps
LIST <- list()
for (i in 1:length (B.cdf)){
LIST [[i]] <- ad.test (B.cdf[[i]], B.bar.cdf[[i]], method = "simulated", Nsim = 500) #Nsim = bootstraps
ad.list <- (LIST)
}
names (ad.list) <- B.names
LIST <- list()
for (i in 1:length (ad.list)) {
LIST [[i]] <- ad.list[[i]]$ad[1,4]
test.results <- (LIST)
}
ad.results <- as.data.table (do.call (rbind, test.results)) #this takes the list elements from AD results and assembles them as a datatable
ad.results <- cbind (B.names, ad.results) #put the factor names in. Need to be careful here to make sure the order did not change
setnames(ad.results, c("factor", "sim.p.value"))
sig.results <- subset (ad.results, ad.results$sim.p.value < 0.05)#subset the AD results based on p-value
save(ad.results, sig.results, B.list, B.bar.list, file = "AD.results.RDA")
rm(list=ls())
R_LIBS= ("/home/R/library")
options(scipen=999) #turn scientific notation off
setwd("~/GitHub/r-sensitivity/")
#Libraries
library (data.table)
library (dplyr)
#Functions
boot.samples <- function (numeric.variable, boots) { for (i in 1:boots)
{df <- numeric.variable[sample(nrow(numeric.variable), boots, replace=TRUE),]
return (df)
}}
load ("ad.results.RDA")
LIST <- list()
for (i in 1:length (B.list)) {
LIST [[i]] <- boot.samples(B.list[[i]], 15000)
LIST [[i]] <- LIST[[i]]$value
B.boot.sample <- (LIST)
}
names(B.boot.sample) <- names(B.list) # put the factor names back in
B.boot.sample <- do.call (cbind, B.boot.sample) # assemple the list elements
#loop through the B.bar.list to resample each factor
LIST <- list()
for (i in 1:length (B.bar.list)) {
LIST [[i]] <- boot.samples(B.bar.list[[i]], 15000)
LIST [[i]] <- LIST[[i]]$value
B.bar.boot.sample <- (LIST)
}
names(B.bar.boot.sample) <- names(B.list)
B.bar.boot.sample <- do.call (cbind, B.bar.boot.sample)
dt <- sig.results$factor #significant factors names
dt2 <- B.boot.sample #bootstrapped sample for group B
cols <- (colnames(dt2) %in% dt)#logical, factors in B that are in the significant group
B.sig <- subset(dt2,,cols)
cor (B.sig) #test to double check our factors line up
sig.factors.boot.underperf <- melt (B.sig)
rm(dt2, cols)
dt3 <- B.bar.boot.sample #bootstrapped sample for group B.bar
cols<-(colnames(dt3) %in% dt)#logical, factors in B.bar that are in the significant group
B.bar.sig<-subset(dt3,,cols)
cor (B.bar.sig) #test to double check our factors line up
sig.factors.boot.front <- melt (B.bar.sig)
rm(dt, dt3)
B.sig.boot <- melt (B.sig)
B.bar.sig.boot <- melt (B.bar.sig)
save (B.sig.boot, B.bar.sig.boot, file = "bootstrapped.data.RDA")
rm(list=ls())
R_LIBS= ("/home/R/library")
options(scipen=999) #turn scientific notation off
setwd("~/GitHub/r-sensitivity/")
#Libraries
library (data.table)
library (dplyr)
#Functions
boot.samples <- function (numeric.variable, boots) { for (i in 1:boots)
{df <- numeric.variable[sample(nrow(numeric.variable), boots, replace=TRUE),]
return (df)
}}
#load data
load ("ad.results.RDA")
#loop through the B.list to resample each factor
LIST <- list()
for (i in 1:length (B.list)) {
LIST [[i]] <- boot.samples(B.list[[i]], 15000)
LIST [[i]] <- LIST[[i]]$value
B.boot.sample <- (LIST)
}
names(B.boot.sample) <- names(B.list) # put the factor names back in
B.boot.sample <- do.call (cbind, B.boot.sample) # assemple the list elements
LIST <- list()
for (i in 1:length (B.bar.list)) {
LIST [[i]] <- boot.samples(B.bar.list[[i]], 15000)
LIST [[i]] <- LIST[[i]]$value
B.bar.boot.sample <- (LIST)
}
names(B.bar.boot.sample) <- names(B.list)
B.bar.boot.sample <- do.call (cbind, B.bar.boot.sample)
dt <- sig.results$factor #significant factors names
dt2 <- B.boot.sample #bootstrapped sample for group B
cols <- (colnames(dt2) %in% dt)#logical, factors in B that are in the significant group
B.sig <- subset(dt2,,cols)
cor (B.sig) #test to double check our factors line up
B.sig.boot <- melt (B.sig)
rm(dt2, cols)
dt3 <- B.bar.boot.sample #bootstrapped sample for group B.bar
cols<-(colnames(dt3) %in% dt)#logical, factors in B.bar that are in the significant group
B.bar.sig<-subset(dt3,,cols)
cor (B.bar.sig) #test to double check our factors line up
B.bar.sig.boot <- melt (B.bar.sig)
rm(dt, dt3)
save (B.sig.boot, B.bar.sig.boot, file = "bootstrapped.data.RDA")
View(B.bar.sig.boot)
test <- cbind(B.sig.boot, B.bar.sig.boot)
View(test)
boots <- cbind(B.sig.boot, B.bar.sig.boot)
View(test)
bootstrapped.samples <- data.table (permutation = boots$Var1, factor = boots$Var2, B.boot = boots$value, B.bar.boot = boots$value)
View(bootstrapped.samples)
str(boots)
setnames (boots, c("permutation", "factor", "B.boot", "permutation2", "factor2", B.bar.boot))
setnames (boots, c("permutation", "factor", "B.boot", "permutation2", "factor2", "B.bar.boot"))
bootstrapped.samples <- data.table (permutation = boots$permutation, factor = boots$factor, B.boot =
boots$B.boot, B.bar.boot = boots$B.bar.boot)
View(bootstrapped.samples)
View(boots)
save (bootstrapped.samples, B.sig, B.bar.sig, file = "bootstrapped.samples.RDA")
write.csv (bootstrapped.samples, "bootstrapped.samples.csv")
#Monte Carlo filtering
#based on Saltelli 2010
# D.Inman 10122016
rm(list=ls())
R_LIBS= ("/home/R/library")
options(scipen=999) #turn scientific notation off
setwd("~/GitHub/r-sensitivity/")
#Libraries
library (data.table)
library (dplyr)
load ("bootstrapped.results.RDA")
load ("bootstrapped.samples.RDA")
filter.upper <- apply (B.sig, 2, quantile, c(0.95))
filter.lower <- apply (B.bar.sig, 2, quantile, c(0.75))
filter <- cbind (filter.upper, filter.lower)
rm(B.sig, B.bar.sig, filter.upper, filter.lower)
load ("design")
load ("design.RDA")
df<-design.in.bsm.format
merge.var.names <- paste (df$variable, df$sub1, df$sub2)
temp.design <- data.table(variable = merge.var.names, run = df$run, value = df$value)
rm(df, merge.var.names)
df <- as.data.frame (lapply(temp.design, function(x) gsub(" ", ".", x)))
df <- dcast (df, run ~ variable)
df[,2:46] = apply(df[,2:46], 2, function(x) as.numeric(as.character(x))) # the data have to be numeric prior to performing the logical expression below
sub <- subset (df, ! (CE.Background.Subs.FCI.NA > 0.50 | CE.Background.Subs.Feedstock.NA > 13 | CE.Policy.Dur.FCI.BC > 14.25 |
CE.Policy.Dur.Feedstock.BC > 17 | CE.Policy.Dur.Price.BC > 10 | CE.Startup.Subs.FCI.NA > 0.57 |
CE.Startup.Subs.Loan.NA > 0.58 | DS.Frac.FCI.subs.NA.NA > 0.82))
new.set.runs <- data.table (run = sub$run)
new.design <- design.in.bsm.format [(design.in.bsm.format$run %in% new.set.runs$run)]
unique (new.design$run)#checking the run numbers here
save (new.design, file = "new.design.RDA")
write.csv (new.design, file = "mcf.filtered.design.csv") #output this to be run in BSM
merge.var.names <- paste (df$variable, df$sub1, df$sub2)
new.design <- data.table(variable = merge.var.names, run = df$run, value = df$value)
rm(list=ls())
R_LIBS= ("/home/R/library")
options(scipen=999) #turn scientific notation off
setwd("~/GitHub/r-sensitivity/")
#Libraries
library (data.table)
library (dplyr)
#load data
load ("bootstrapped.samples.RDA")
load ("design.RDA")
#filtering criteria - B-Q3 to Bbar-Q3
filter.upper <- apply (B.sig, 2, quantile, c(0.95))
filter.lower <- apply (B.bar.sig, 2, quantile, c(0.75))
filter <- cbind (filter.upper, filter.lower)
rm(B.sig, B.bar.sig, filter.upper, filter.lower)
#the naming convention used in the BSM is ugly and needs some work before we can use it in R
#change variable names in the large study design
df<-design.in.bsm.format
merge.var.names <- paste (df$variable, df$sub1, df$sub2)
temp.design <- data.table(variable = merge.var.names, run = df$run, value = df$value)
df <- as.data.frame (lapply(temp.design, function(x) gsub(" ", ".", x)))
df <- dcast (df, run ~ variable)
df[,2:46] = apply(df[,2:46], 2, function(x) as.numeric(as.character(x))) # the data have to be numeric prior to performing the logical expression below
sub <- subset (df, ! (CE.Background.Subs.FCI.NA > 0.50 | CE.Background.Subs.Feedstock.NA > 13 | CE.Policy.Dur.FCI.BC > 14.25 |
CE.Policy.Dur.Feedstock.BC > 17 | CE.Policy.Dur.Price.BC > 10 | CE.Startup.Subs.FCI.NA > 0.57 |
CE.Startup.Subs.Loan.NA > 0.58 | DS.Frac.FCI.subs.NA.NA > 0.82))
new.set.runs <- data.table (run = sub$run)
new.design <- design.in.bsm.format [(design.in.bsm.format$run %in% new.set.runs$run)]
rm(list=ls())
R_LIBS= ("/home/R/library")
options(scipen=999) #turn scientific notation off
setwd("~/GitHub/r-sensitivity/")
#Libraries
library (data.table)
library (dplyr)
#load data
load ("bootstrapped.samples.RDA")
load ("design.RDA")
#filtering criteria - B-Q3 to Bbar-Q3
filter.upper <- apply (B.sig, 2, quantile, c(0.95))
filter.lower <- apply (B.bar.sig, 2, quantile, c(0.75))
filter <- cbind (filter.upper, filter.lower)
rm(B.sig, B.bar.sig, filter.upper, filter.lower)
#the naming convention used in the BSM is ugly and needs some work before we can use it in R
#change variable names in the large study design
df<-design.in.bsm.format
merge.var.names <- paste (df$variable, df$sub1, df$sub2)
temp.design <- data.table(variable = merge.var.names, run = df$run, value = df$value)
df <- as.data.frame (lapply(temp.design, function(x) gsub(" ", ".", x)))
df <- dcast (df, run ~ variable)
df[,2:46] = apply(df[,2:46], 2, function(x) as.numeric(as.character(x))) # the data have to be numeric prior to performing the logical expression below
sub <- subset (df, ! (CE.Background.Subs.FCI.NA > 0.50 | CE.Background.Subs.Feedstock.NA > 13 | CE.Policy.Dur.FCI.BC > 14.25 |
CE.Policy.Dur.Feedstock.BC > 17 | CE.Policy.Dur.Price.BC > 10 | CE.Startup.Subs.FCI.NA > 0.57 |
CE.Startup.Subs.Loan.NA > 0.58 | DS.Frac.FCI.subs.NA.NA > 0.82))
new.set.runs <- data.table (run = sub$run)
new.design <- design.in.bsm.format [(design.in.bsm.format$run %in% new.set.runs$run)]
save (new.design, file = "new.design.RDA")
write.csv (new.design, file = "mcf.filtered.design.csv") #output this to be run in BSM
rm(list=ls())
R_LIBS= ("/home/R/library")
options(scipen=999) #turn scientific notation off
setwd("~/GitHub/r-sensitivity/")
#Libraries
library (data.table)
library (dplyr)
library (kSamples)
#Monte Carlo filtering
#based on Saltelli 2010
# D.Inman 10122016
rm(list=ls())
R_LIBS= ("/home/R/library")
options(scipen=999) #turn scientific notation off
setwd("~/GitHub/r-sensitivity/")
#Libraries
library (kSamples)
library (data.table)
library (dplyr)
#Functions
get.cdf <- function (numeric.variable, df) {
Fn <- ecdf (numeric.variable)
return (knots (Fn))
}
#study design can't have years, only duration
load ("design.RDA")
design <- as.data.table (design.in.bsm.format)#need the design with "duration" as a variable
df <- design
merge.var.names <- paste (df$variable, df$sub1, df$sub2)
design <- data.table(variable = merge.var.names, run = df$run, value = df$value)
# local sensitivity analysis
# define behavioural (B) and non-behavioral (B.bar) sets to test for significant diff in their input settings
# select runs of interest (B) from an excel or csv file that is chosen based on tableau
# Use the MCF results to filter the input set
B.runs <- read.table ("B.csv", header=TRUE, sep=",")#these are the runs of interest Laura chose these based on tableau
B <- subset(design, design$run %in% B.runs$run)
B.sorted <- setorder (B, variable)
B.list <- split(B.sorted, B.sorted$variable)
B.names <- as.character (unique (B.sorted$variable))
LIST <- list ()
for (i in 1: length(B.list)) {
LIST [[i]] <- get.cdf (B.list[[i]]$value, B.list[[i]])
B.cdf <- LIST
}
names (B.cdf) <- B.names #apply the vbl names to the list elements
rm(design.in.bsm.format, B, B.sorted, merge.var.names, df)
#get the cdf for Bbar
B.bar <- design [ !(design$run %in% B.runs$run), ]#this creates the Bbar by subtracting B from the design
B.bar.sorted <- setorder (B.bar, variable)
B.bar.list <- split(B.bar.sorted, B.bar.sorted$variable)
B.bar.names <- as.character (unique (B.bar.sorted$variable))
LIST <- list ()
for (i in 1:length (B.bar.list)) {
LIST [[i]] <- get.cdf (B.bar.list[[i]]$value, B.bar.list[[i]])
B.bar.cdf <- LIST
}
names (B.bar.cdf) <- B.bar.names#apply the vbl names to the list elements
rm(B.bar, B.bar.sorted, B.runs, design, B.bar.names, LIST)
#perform Anderson-Darling test to compare B to Bbar. H0 = B and Bbar are from the same population; H1 = B and Bbar are not from the same population
#pvalues are based on 5000 bootstraps
LIST <- list()
for (i in 1:length (B.cdf)){
LIST [[i]] <- ad.test (B.cdf[[i]], B.bar.cdf[[i]], method = "simulated", Nsim = 500) #Nsim = bootstraps
ad.list <- (LIST)
}
names (ad.list) <- B.names
LIST <- list()
for (i in 1:length (ad.list)) {
LIST [[i]] <- ad.list[[i]]$ad[1,4]
test.results <- (LIST)
}
ad.results <- as.data.table (do.call (rbind, test.results)) #this takes the list elements from AD results and assembles them as a datatable
ad.results <- cbind (B.names, ad.results) #put the factor names in. Need to be careful here to make sure the order did not change
setnames(ad.results, c("factor", "sim.p.value"))
sig.results <- subset (ad.results, ad.results$sim.p.value < 0.05)#subset the AD results based on p-value
save(ad.results, sig.results, B.list, B.bar.list, B.cdf, file = "AD.results.RDA")
save(ad.results, sig.results, B.list, B.bar.list, B.cdf, file = "/results/AD.results.RDA")
save(ad.results, sig.results, B.list, B.bar.list, B.cdf, file = /results/"AD.results.RDA")
save(ad.results, sig.results, B.list, B.bar.list, B.cdf, file = results/"AD.results.RDA")
results.path <- ("~/GitHub/r-sensitivity/results/")
save(ad.results, sig.results, B.list, B.bar.list, B.cdf, file = paste (results.path,"AD.results.RDA")
)
rm(list=ls())
R_LIBS= ("/home/R/library")
options(scipen=999) #turn scientific notation off
setwd("~/GitHub/r-sensitivity/")
results.path <- ("~/GitHub/r-sensitivity/results/")
#Libraries
library (data.table)
library (dplyr)
#Functions
boot.samples <- function (numeric.variable, boots) { for (i in 1:boots)
{df <- numeric.variable[sample(nrow(numeric.variable), boots, replace=TRUE),]
return (df)
}}
load (paste (results.path, "ad.results.RDA")
)
#loop through the B.list to resample each factor
LIST <- list()
for (i in 1:length (B.list)) {
LIST [[i]] <- boot.samples(B.list[[i]], 15000)
LIST [[i]] <- LIST[[i]]$value
B.boot.sample <- (LIST)
}
names(B.boot.sample) <- names(B.list) # put the factor names back in
B.boot.sample <- do.call (cbind, B.boot.sample) # assemple the list elements
#loop through the B.bar.list to resample each factor
LIST <- list()
for (i in 1:length (B.bar.list)) {
LIST [[i]] <- boot.samples(B.bar.list[[i]], 15000)
LIST [[i]] <- LIST[[i]]$value
B.bar.boot.sample <- (LIST)
}
names(B.bar.boot.sample) <- names(B.list)
B.bar.boot.sample <- do.call (cbind, B.bar.boot.sample)
####################
# bootstrapped results for the two sets for sig factors only
dt <- sig.results$factor #significant factors names
dt2 <- B.boot.sample #bootstrapped sample for group B
cols <- (colnames(dt2) %in% dt)#logical, factors in B that are in the significant group
B.sig <- subset(dt2,,cols)
cor (B.sig) #test to double check our factors line up
B.sig.boot <- melt (B.sig)
rm(dt2, cols)
dt3 <- B.bar.boot.sample #bootstrapped sample for group B.bar
cols<-(colnames(dt3) %in% dt)#logical, factors in B.bar that are in the significant group
B.bar.sig<-subset(dt3,,cols)
cor (B.bar.sig) #test to double check our factors line up
B.bar.sig.boot <- melt (B.bar.sig)
boots <- cbind(B.sig.boot, B.bar.sig.boot)
setnames (boots, c("permutation", "factor", "B.boot", "permutation2", "factor2", "B.bar.boot"))
bootstrapped.samples <- data.table (permutation = boots$permutation, factor = boots$factor, B.boot =
boots$B.boot, B.bar.boot = boots$B.bar.boot)
save (bootstrapped.samples, B.sig, B.bar.sig, file = paste (results.path, "bootstrapped.samples.RDA"))
write.csv (bootstrapped.samples, paste (results.path, "bootstrapped.samples.csv"))
rm(list=ls())
R_LIBS= ("/home/R/library")
options(scipen=999) #turn scientific notation off
setwd("~/GitHub/r-sensitivity/")
results.path <- ("~/GitHub/r-sensitivity/results/")
#Libraries
library (data.table)
library (dplyr)
load (paste (results.path, "bootstrapped.samples.RDA"))
load ("design.RDA")
#filtering criteria - B-Q3 to Bbar-Q3
filter.upper <- apply (B.sig, 2, quantile, c(0.95))
filter.lower <- apply (B.bar.sig, 2, quantile, c(0.75))
filter <- cbind (filter.upper, filter.lower)
rm(B.sig, B.bar.sig, filter.upper, filter.lower)
#the naming convention used in the BSM is ugly and needs some work before we can use it in R
#change variable names in the large study design
df<-design.in.bsm.format
merge.var.names <- paste (df$variable, df$sub1, df$sub2)
temp.design <- data.table(variable = merge.var.names, run = df$run, value = df$value)
df <- as.data.frame (lapply(temp.design, function(x) gsub(" ", ".", x)))
df <- dcast (df, run ~ variable)
df[,2:46] = apply(df[,2:46], 2, function(x) as.numeric(as.character(x))) # the data have to be numeric prior to performing the logical expression below
sub <- subset (df, ! (CE.Background.Subs.FCI.NA > 0.50 | CE.Background.Subs.Feedstock.NA > 13 | CE.Policy.Dur.FCI.BC > 14.25 |
CE.Policy.Dur.Feedstock.BC > 17 | CE.Policy.Dur.Price.BC > 10 | CE.Startup.Subs.FCI.NA > 0.57 |
CE.Startup.Subs.Loan.NA > 0.58 | DS.Frac.FCI.subs.NA.NA > 0.82))
new.set.runs <- data.table (run = sub$run)
new.design <- design.in.bsm.format [(design.in.bsm.format$run %in% new.set.runs$run)]
save (new.design, file = paste (results.path, "new.design.RDA"))
write.csv (new.design, file = paste (results.path, "mcf.filtered.design.csv")) #output this to be run in BSM
rm(list=ls())
R_LIBS= ("/home/R/library")
options(scipen=999) #turn scientific notation off
setwd("~/GitHub/r-sensitivity/")
results.path <- ("~/GitHub/r-sensitivity/results/")
library (data.table)
library (dplyr)
library (kSamples)
load (paste (results.path, (AD.results.RDA)))
rm(list=ls())
R_LIBS= ("/home/R/library")
options(scipen=999) #turn scientific notation off
setwd("~/GitHub/r-sensitivity/")
results.path <- ("~/GitHub/r-sensitivity/results/")
#Libraries
library (data.table)
library (dplyr)
library (kSamples)
load (paste (results.path, AD.results.RDA))
load (paste (results.path, "AD.results.RDA"))
load (paste (results.path, "bootstrapped.samples.RDA"))
rm(list=ls())
R_LIBS= ("/home/R/library")
options(scipen=999) #turn scientific notation off
setwd("~/GitHub/r-sensitivity/")
results.path <- ("~/GitHub/r-sensitivity/results/")
#Libraries
library (data.table)
library (dplyr)
#load data
load (paste (results.path, "bootstrapped.samples.RDA"))
load ("design.RDA")
#filtering criteria - B-Q3 to Bbar-Q3
filter.upper <- apply (B.sig, 2, quantile, c(0.95))
filter.lower <- apply (B.bar.sig, 2, quantile, c(0.75))
filter <- cbind (filter.upper, filter.lower)
rm(B.sig, B.bar.sig, filter.upper, filter.lower)
#the naming convention used in the BSM is ugly and needs some work before we can use it in R
#change variable names in the large study design
df<-design.in.bsm.format
merge.var.names <- paste (df$variable, df$sub1, df$sub2)
temp.design <- data.table(variable = merge.var.names, run = df$run, value = df$value)
df <- as.data.frame (lapply(temp.design, function(x) gsub(" ", ".", x)))
df <- dcast (df, run ~ variable)
df[,2:46] = apply(df[,2:46], 2, function(x) as.numeric(as.character(x))) # the data have to be numeric prior to performing the logical expression below
sub <- subset (df, ! (CE.Background.Subs.FCI.NA > 0.50 | CE.Background.Subs.Feedstock.NA > 13 | CE.Policy.Dur.FCI.BC > 14.25 |
CE.Policy.Dur.Feedstock.BC > 17 | CE.Policy.Dur.Price.BC > 10 | CE.Startup.Subs.FCI.NA > 0.57 |
CE.Startup.Subs.Loan.NA > 0.58 | DS.Frac.FCI.subs.NA.NA > 0.82))
new.set.runs <- data.table (run = sub$run)
new.design <- design.in.bsm.format [(design.in.bsm.format$run %in% new.set.runs$run)]
save (new.design, df,  file = paste (results.path, "new.design.RDA"))
write.csv (new.design, file = paste (results.path, "mcf.filtered.design.csv")) #output this to be run in BSM
rm(list=ls())
R_LIBS= ("/home/R/library")
options(scipen=999) #turn scientific notation off
setwd("~/GitHub/r-sensitivity/")
results.path <- ("~/GitHub/r-sensitivity/results/")
#Libraries
library (data.table)
library (dplyr)
library (kSamples)
#load data
load (paste (results.path, "AD.results.RDA"))
load (paste (results.path, "bootstrapped.samples.RDA"))
#now lets take a closer look at our resampled study design
merge.var.names <- paste (df$variable, df$sub1, df$sub2)
new.design <- data.table(variable = merge.var.names, run = df$run, value = df$value)
resampled.pilot <- new.design [(new.design$variable %in% sig.results$factor)]
resampled.pilot.list <- split(resampled.pilot, resampled.pilot$variable)
load (paste (results.path, "new.design.RDA"))
merge.var.names <- paste (df$variable, df$sub1, df$sub2)
new.design <- data.table(variable = merge.var.names, run = df$run, value = df$value)
resampled.pilot <- new.design [(new.design$variable %in% sig.results$factor)]
resampled.pilot.list <- split(resampled.pilot, resampled.pilot$variable)
View(df)
rm(list=ls())
R_LIBS= ("/home/R/library")
options(scipen=999) #turn scientific notation off
setwd("~/GitHub/r-sensitivity/")
results.path <- ("~/GitHub/r-sensitivity/results/")
source ("AD.R")
source ("1.AD.R")
